# Copyright ${creationYear} ${authorFullName} (http://www.gerdi-project.de)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${serviceName}
  labels:
    app: ${serviceName}
    scs: ${serviceType}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${serviceName}
  template:
    metadata:
      labels:
        scs: ${serviceType}
        app: ${serviceName}
    spec:
      initContainers:
        - name: correct-permissions
          image: busybox
          securityContext:
            privileged: true
          command: ['sh', '-c', 'chown 100 /var/lib/jetty/cache']
          volumeMounts:
            - mountPath: /var/lib/jetty/cache/
              name: ${serviceName}-cache
      containers:
        - name: ${serviceName}
          image: ${dockerImage}
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /var/lib/jetty/cache/
              name: ${serviceName}-cache
          resources:
            requests:
              memory: "256Mi"
              cpu:    "250m"
            limits:
              memory: "512Mi"
              cpu:    "500m"
      imagePullSecrets:
        - name: lrz-docker-registry-secret
      volumes:
        - name: ${serviceName}-cache
          hostPath:
            path: /mnt/nfs/test/${serviceType}/${serviceName}
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: ${serviceName}
  labels:
    run: ${serviceName}
    scs: ${serviceType}
spec:
  clusterIP: ${clusterIp}
  ports:
    - port: 8080
      protocol: TCP
  selector:
    app: ${serviceName}
